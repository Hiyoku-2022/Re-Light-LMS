name: CI/CD Pipeline for Staging

on:
  pull_request:
    branches:
      - '**'  # すべてのブランチからのプルリクエストをトリガー
  push:
    branches:
      - staging

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Run Jest tests
        run: npm test -- --passWithNoTests

      # - name: Run Cypress tests
      #   run: npm run cypress:run -- --headless  # ヘッドレスモードで実行

  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Generate .env.staging file
        run: |
          echo "NEXT_PUBLIC_FIREBASE_API_KEY=${{ secrets.STAGING_NEXT_PUBLIC_FIREBASE_API_KEY }}" >> .env.staging
          echo "NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=${{ secrets.STAGING_NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}" >> .env.staging
          echo "NEXT_PUBLIC_FIREBASE_PROJECT_ID=${{ secrets.STAGING_NEXT_PUBLIC_FIREBASE_PROJECT_ID }}" >> .env.staging
          echo "NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=${{ secrets.STAGING_NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}" >> .env.staging
          echo "NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.STAGING_NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}" >> .env.staging
          echo "NEXT_PUBLIC_FIREBASE_APP_ID=${{ secrets.STAGING_NEXT_PUBLIC_FIREBASE_APP_ID }}" >> .env.staging
          echo "FIREBASE_PROJECT_ID=${{ secrets.STAGING_FIREBASE_PROJECT_ID }}" >> .env.staging
          echo "FIREBASE_CLIENT_EMAIL=${{ secrets.STAGING_FIREBASE_CLIENT_EMAIL }}" >> .env.staging
          echo "FIREBASE_PRIVATE_KEY=\"$(echo ${{ secrets.STAGING_FIREBASE_PRIVATE_KEY }} | base64 --decode)\"" >> .env.staging
          echo "NEXT_PUBLIC_JS_EXECUTOR_API=${{ secrets.STAGING_NEXT_PUBLIC_JS_EXECUTOR_API }}" >> .env.staging
          echo "NEXT_PUBLIC_PHP_EXECUTOR_API=${{ secrets.STAGING_NEXT_PUBLIC_PHP_EXECUTOR_API }}" >> .env.staging

      - name: Authenticate with GCP
        run: |
          echo "${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}" | base64 --decode > /tmp/keyfile.json
          gcloud auth activate-service-account --key-file=/tmp/keyfile.json
          gcloud --quiet config set project ${{ secrets.GCP_PROJECT_ID }}

      - name: Authenticate Docker with GCP
        run: |
          gcloud auth configure-docker asia-northeast2-docker.pkg.dev

      - name: Build Docker image
        run: |
          docker build --platform linux/amd64 --build-arg ENV_FILE=.env.staging -t asia-northeast2-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/my-app-staging/my-app-staging:latest .

      - name: Push Docker image to Artifact Registry
        run: |
          docker push asia-northeast2-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/my-app-staging/my-app-staging:latest

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy re-light-staging \
            --image asia-northeast2-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/my-app-staging/my-app-staging:latest \
            --region asia-northeast2 \
            --platform managed \
            --allow-unauthenticated
